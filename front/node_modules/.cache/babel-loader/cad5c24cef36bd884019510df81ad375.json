{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ariet/project/pizza_shop/src/pages/SingUp.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport * as yup from 'yup';\nimport { Formik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { signUpUser, signUpUserSuccess, signUpUserFailure } from '../redux/actions/user';\nimport { useHistory } from 'react-router-dom';\nimport { TabAuth } from '../components';\nexport default function SingUp() {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm();\n  const {\n    error,\n    isAuth,\n    loading\n  } = useSelector(({\n    userReducer\n  }) => userReducer);\n  const history = useHistory(); // const validationSchema = yup.object().shape({\n  //   username: yup.string().required('Обезятельно'),\n  //   last_name: yup.string().required('Обезятельно'),\n  //   password: yup.string().required('Обезятельно'),\n  //   email: yup.string().email('Введите коректный Email').required('Обезятельно'),\n  // });\n\n  const onHandleSumbit = values => {\n    console.log('Clicked ', loading); // dispatch(signUpUser(values))\n    //   .then(({ data }) => {\n    //     setTimeout(() => {\n    //       localStorage.setItem('token', JSON.stringify(data.auth_token));\n    //       dispatch(signUpUserSuccess(data));\n    //       history.push('./account');\n    //     }, 3000);\n    //   })\n    //   .catch((error) => {\n    //     dispatch(signUpUserFailure(error.message));\n    //   });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onHandleSumbit),\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"username\",\n        type: \"text\",\n        ref: register({\n          required: true\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"\\u0424\\u0430\\u043C\\u0438\\u043B\\u0438\\u044F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"lastName\",\n        type: \"text\",\n        ref: register({\n          required: true\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"password\",\n        type: \"password\",\n        ref: register({\n          required: true\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"email\",\n        type: \"eamil\",\n        ref: register({\n          required: true\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"sumbit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this); // return (\n  //   <div className=\"container\">\n  //     <TabAuth />\n  //     <Formik\n  //       initialValues={{\n  //         username: '',\n  //         last_name: '',\n  //         password: '',\n  //         email: '',\n  //       }}\n  //       validateOnBlur\n  //       validationSchema={validationSchema}\n  //       onSubmit={(values) => onHandleSumbit(values)}>\n  //       {({ values, errors, touched, handleBlur, handleChange, handleSubmit, isValid, dirty }) => (\n  //         <div className=\"form\">\n  //           <p>Имя</p>\n  //           <input\n  //             name=\"username\"\n  //             type=\"text\"\n  //             onChange={handleChange}\n  //             onBlur={handleBlur}\n  //             value={values.username}\n  //           />{' '}\n  //           <br />\n  //           {touched.username && errors.username && <p className=\"error\">{errors.username}</p>}\n  //           <br />\n  //           <p>Фамилия </p>\n  //           <input\n  //             name=\"last_name\"\n  //             type=\"text\"\n  //             onChange={handleChange}\n  //             onBlur={handleBlur}\n  //             value={values.last_name}\n  //           />{' '}\n  //           <br />\n  //           {touched.last_name && errors.last_name && <p className=\"error\">{errors.last_name}</p>}\n  //           <p>Пароль </p>\n  //           <input\n  //             name=\"password\"\n  //             type=\"password\"\n  //             onChange={handleChange}\n  //             onBlur={handleBlur}\n  //             value={values.password}\n  //           />\n  //           {touched.password && errors.password && <p className=\"error\">{errors.password}</p>}\n  //           <p>Email</p>\n  //           <input\n  //             name=\"email\"\n  //             type=\"email\"\n  //             onChange={handleChange}\n  //             onBlur={handleBlur}\n  //             value={values.email}\n  //           />\n  //           <br />\n  //           {touched.email && errors.email && <p className=\"error\">{errors.email}</p>}\n  //           <p className=\"error\">{error}</p>\n  //           {!loading ? (\n  //             <button disabled={!isValid && !dirty} onClick={handleSubmit} type=\"submit\">\n  //               Отправить\n  //             </button>\n  //           ) : (\n  //             <div> Loading... </div>\n  //           )}\n  //         </div>\n  //       )}\n  //     </Formik>\n  //   </div>\n  // );\n}\n\n_s(SingUp, \"qeBamvArC1Dw1vXud0ktz+n6E0g=\", false, function () {\n  return [useDispatch, useForm, useSelector, useHistory];\n});\n\n_c = SingUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingUp\");","map":{"version":3,"sources":["/home/ariet/project/pizza_shop/src/pages/SingUp.js"],"names":["React","yup","Formik","useDispatch","useSelector","useForm","signUpUser","signUpUserSuccess","signUpUserFailure","useHistory","TabAuth","SingUp","dispatch","register","handleSubmit","errors","error","isAuth","loading","userReducer","history","onHandleSumbit","values","console","log","required"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as yup from 'yup';\nimport { Formik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm } from 'react-hook-form';\n\nimport { signUpUser, signUpUserSuccess, signUpUserFailure } from '../redux/actions/user';\nimport { useHistory } from 'react-router-dom';\nimport { TabAuth } from '../components';\n\nexport default function SingUp() {\n  const dispatch = useDispatch();\n  const { register, handleSubmit, errors } = useForm();\n  const { error, isAuth, loading } = useSelector(({ userReducer }) => userReducer);\n\n  const history = useHistory();\n\n  // const validationSchema = yup.object().shape({\n  //   username: yup.string().required('Обезятельно'),\n  //   last_name: yup.string().required('Обезятельно'),\n  //   password: yup.string().required('Обезятельно'),\n  //   email: yup.string().email('Введите коректный Email').required('Обезятельно'),\n  // });\n\n  const onHandleSumbit = (values) => {\n    console.log('Clicked ', loading);\n\n    // dispatch(signUpUser(values))\n    //   .then(({ data }) => {\n    //     setTimeout(() => {\n    //       localStorage.setItem('token', JSON.stringify(data.auth_token));\n    //       dispatch(signUpUserSuccess(data));\n    //       history.push('./account');\n    //     }, 3000);\n    //   })\n    //   .catch((error) => {\n    //     dispatch(signUpUserFailure(error.message));\n    //   });\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onHandleSumbit)}>\n      <p>\n        <label>Username</label>\n        <input name=\"username\" type=\"text\" ref={register({ required: true })} />\n      </p>\n      <p>\n        <label>Фамилия</label>\n        <input name=\"lastName\" type=\"text\" ref={register({ required: true })} />\n      </p>\n      <p>\n        <label>Пароль</label>\n        <input name=\"password\" type=\"password\" ref={register({ required: true })} />\n      </p>\n      <p>\n        <label>Email</label>\n        <input name=\"email\" type=\"eamil\" ref={register({ required: true })} />\n      </p>\n      <input type=\"sumbit\" />\n    </form>\n  );\n\n  // return (\n  //   <div className=\"container\">\n  //     <TabAuth />\n  //     <Formik\n  //       initialValues={{\n  //         username: '',\n  //         last_name: '',\n  //         password: '',\n  //         email: '',\n  //       }}\n  //       validateOnBlur\n  //       validationSchema={validationSchema}\n  //       onSubmit={(values) => onHandleSumbit(values)}>\n  //       {({ values, errors, touched, handleBlur, handleChange, handleSubmit, isValid, dirty }) => (\n  //         <div className=\"form\">\n  //           <p>Имя</p>\n  //           <input\n  //             name=\"username\"\n  //             type=\"text\"\n  //             onChange={handleChange}\n  //             onBlur={handleBlur}\n  //             value={values.username}\n  //           />{' '}\n  //           <br />\n  //           {touched.username && errors.username && <p className=\"error\">{errors.username}</p>}\n  //           <br />\n  //           <p>Фамилия </p>\n  //           <input\n  //             name=\"last_name\"\n  //             type=\"text\"\n  //             onChange={handleChange}\n  //             onBlur={handleBlur}\n  //             value={values.last_name}\n  //           />{' '}\n  //           <br />\n  //           {touched.last_name && errors.last_name && <p className=\"error\">{errors.last_name}</p>}\n  //           <p>Пароль </p>\n  //           <input\n  //             name=\"password\"\n  //             type=\"password\"\n  //             onChange={handleChange}\n  //             onBlur={handleBlur}\n  //             value={values.password}\n  //           />\n  //           {touched.password && errors.password && <p className=\"error\">{errors.password}</p>}\n  //           <p>Email</p>\n  //           <input\n  //             name=\"email\"\n  //             type=\"email\"\n  //             onChange={handleChange}\n  //             onBlur={handleBlur}\n  //             value={values.email}\n  //           />\n  //           <br />\n  //           {touched.email && errors.email && <p className=\"error\">{errors.email}</p>}\n  //           <p className=\"error\">{error}</p>\n  //           {!loading ? (\n  //             <button disabled={!isValid && !dirty} onClick={handleSubmit} type=\"submit\">\n  //               Отправить\n  //             </button>\n  //           ) : (\n  //             <div> Loading... </div>\n  //           )}\n  //         </div>\n  //       )}\n  //     </Formik>\n  //   </div>\n  // );\n}\n"]},"metadata":{},"sourceType":"module"}