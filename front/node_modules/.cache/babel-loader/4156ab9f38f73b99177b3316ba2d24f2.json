{"ast":null,"code":"const initialState = {\n  items: {},\n  totalPrice: 0,\n  itemCount: 0\n}; // function getTotalPrice(arr) {\n//   arr.reduce((sum, obj) => obj.price + sum, 0);\n// }\n\nfunction cart(state = initialState, action) {\n  switch (action.type) {\n    case 'ADD_PIZZAS':\n      {\n        const currentPizzaItems = !state.items[action.payload.id] ? [action.payload] : [...state.items[action.payload.id].items, action.payload];\n        const newItems = { ...state.items,\n          [action.payload.id]: {\n            items: currentPizzaItems,\n            totalPrice: currentPizzaItems.reduce((sum, obj) => obj.price + sum, 0),\n            totalCount: currentPizzaItems.length\n          }\n        };\n        const totalArr = [].concat.apply([], Object.values(newItems).map(obj => obj.items));\n        return { ...state,\n          items: newItems,\n          itemCount: totalArr.length,\n          totalPrice: totalArr.reduce((sum, obj) => obj.price + sum, 0)\n        };\n      }\n\n    case 'CLEAR_CART':\n      return {\n        items: {},\n        itemCount: 0,\n        totalPrice: 0\n      };\n\n    case 'REMOVE_CART_ITEM':\n      {\n        const newItems = { ...state.items\n        };\n        const currentTotalPrice = newItems[action.payload].totalPrice;\n        const currentTotalCount = newItems[action.payload].totalCount;\n        delete newItems[action.payload];\n        return { ...state,\n          items: newItems,\n          totalPrice: state.totalPrice - currentTotalPrice,\n          itemCount: state.itemCount - currentTotalCount\n        };\n      }\n\n    case 'INCREMENT':\n      {\n        const newItems = [...state.items[action.payload].items, state.items[action.payload].items[0]]; // const price = state.items[action.payload].items[0].price;\n\n        console.log(state.items); // const totalArr = [].concat.apply(\n        //   [],\n        //   Object.values(newItems).map((obj) => obj.items),\n        // );\n\n        return { ...state,\n          items: { ...state.items,\n            [action.payload]: {\n              items: newItems,\n              totalPrice: newItems.reduce((sum, obj) => obj.price + sum, 0),\n              totalCount: newItems.length\n            }\n          } // totalPrice: totalArr.reduce((sum, obj) => obj.price + sum, 0),\n          // itemCount: state.itemCount + 1,\n\n        };\n      }\n\n    case 'DECREMENT':\n      {\n        const oldItems = state.items[action.payload].items;\n        const newItems = oldItems.length > 1 ? state.items[action.payload].items.slice(1) : oldItems;\n        const price = state.items[action.payload].items[0].price; // const totalArr = [].concat.apply(\n        //   [],\n        //   Object.values(newItems).map((obj) => obj.items),\n        // );\n\n        return { ...state,\n          items: { ...state.items,\n            [action.payload]: {\n              items: newItems,\n              totalPrice: newItems.reduce((sum, obj) => obj.price + sum, 0),\n              totalCount: newItems.length\n            }\n          } // totalPrice: state.totalPrice - price,\n          // itemCount: state.itemCount - 1,\n\n        };\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default cart;","map":{"version":3,"sources":["/home/ariet/project/pizza_shop/src/redux/reducers/cart.js"],"names":["initialState","items","totalPrice","itemCount","cart","state","action","type","currentPizzaItems","payload","id","newItems","reduce","sum","obj","price","totalCount","length","totalArr","concat","apply","Object","values","map","currentTotalPrice","currentTotalCount","console","log","oldItems","slice"],"mappings":"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","sourcesContent":["const initialState = {\n  items: {},\n  totalPrice: 0,\n  itemCount: 0,\n};\n\n// function getTotalPrice(arr) {\n//   arr.reduce((sum, obj) => obj.price + sum, 0);\n// }\n\nfunction cart(state = initialState, action) {\n  switch (action.type) {\n    case 'ADD_PIZZAS': {\n      const currentPizzaItems = !state.items[action.payload.id]\n        ? [action.payload]\n        : [...state.items[action.payload.id].items, action.payload];\n\n      const newItems = {\n        ...state.items,\n        [action.payload.id]: {\n          items: currentPizzaItems,\n          totalPrice: currentPizzaItems.reduce((sum, obj) => obj.price + sum, 0),\n          totalCount: currentPizzaItems.length,\n        },\n      };\n      const totalArr = [].concat.apply(\n        [],\n        Object.values(newItems).map((obj) => obj.items),\n      );\n\n      return {\n        ...state,\n        items: newItems,\n        itemCount: totalArr.length,\n        totalPrice: totalArr.reduce((sum, obj) => obj.price + sum, 0),\n      };\n    }\n\n    case 'CLEAR_CART':\n      return {\n        items: {},\n        itemCount: 0,\n        totalPrice: 0,\n      };\n\n    case 'REMOVE_CART_ITEM': {\n      const newItems = {\n        ...state.items,\n      };\n\n      const currentTotalPrice = newItems[action.payload].totalPrice;\n      const currentTotalCount = newItems[action.payload].totalCount;\n\n      delete newItems[action.payload];\n\n      return {\n        ...state,\n        items: newItems,\n        totalPrice: state.totalPrice - currentTotalPrice,\n        itemCount: state.itemCount - currentTotalCount,\n      };\n    }\n    case 'INCREMENT': {\n      const newItems = [...state.items[action.payload].items, state.items[action.payload].items[0]];\n      // const price = state.items[action.payload].items[0].price;\n\n      console.log(state.items);\n\n      // const totalArr = [].concat.apply(\n      //   [],\n      //   Object.values(newItems).map((obj) => obj.items),\n      // );\n\n      return {\n        ...state,\n        items: {\n          ...state.items,\n          [action.payload]: {\n            items: newItems,\n            totalPrice: newItems.reduce((sum, obj) => obj.price + sum, 0),\n            totalCount: newItems.length,\n          },\n        },\n        // totalPrice: totalArr.reduce((sum, obj) => obj.price + sum, 0),\n        // itemCount: state.itemCount + 1,\n      };\n    }\n\n    case 'DECREMENT': {\n      const oldItems = state.items[action.payload].items;\n      const newItems = oldItems.length > 1 ? state.items[action.payload].items.slice(1) : oldItems;\n      const price = state.items[action.payload].items[0].price;\n\n      // const totalArr = [].concat.apply(\n      //   [],\n      //   Object.values(newItems).map((obj) => obj.items),\n      // );\n\n      return {\n        ...state,\n        items: {\n          ...state.items,\n          [action.payload]: {\n            items: newItems,\n            totalPrice: newItems.reduce((sum, obj) => obj.price + sum, 0),\n            totalCount: newItems.length,\n          },\n        },\n        // totalPrice: state.totalPrice - price,\n        // itemCount: state.itemCount - 1,\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport default cart;\n"]},"metadata":{},"sourceType":"module"}